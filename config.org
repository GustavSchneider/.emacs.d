* Initial Setup
** package
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (add-to-list 'package-archives
                  '("marmelade" . "http://marmalade-repo.org/packages/") t)
     (package-initialize)
     (setq url-http.attempt-keepalives nil)
     (add-to-list 'load-path "~/.emacs.d/elpa/")
   #+END_SRC
** has-clang
  Create a variable has-clang which later is used to check if clang is
  installed.
  #+BEGIN_SRC emacs-lisp
    (defvar has-clang (not (eq (executable-find "clang") nil)))
  #+END_SRC
** use-package
  The configuration relies heavily on use-package to ensure packages
  is installed automatically. The following code ensures that
  use-package is installed automatically aswell.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (progn (message "installing use-package")
           (package-refresh-contents)
           (package-install 'use-package)))
  (require 'use-package)
#+END_SRC
** style
*** misc
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) ;; no menu bar
  (tool-bar-mode -1) ;; no tool bar
  (scroll-bar-mode -1) ;; no scrollbar
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :defer t
    :ensure t
    :init (load-theme 'spacemacs-dark t))

  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator 'arrow)
    (spaceline-spacemacs-theme)
    (powerline-reset))
#+END_SRC
** defaults
*** backup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+END_SRC
** email
   #+BEGIN_SRC emacs-lisp
     (setq send-mail-function 'smtpmail-send-it
           smtpmail-smtp-server "smtp.kth.se"
           smtpmail-stream-type 'starttls
           smtpmail-smtp-service 587)
     (setq user-full-name "Gustav Nelson Schneider")
     (setq user-mail-address "gussch@kth.se")
   #+END_SRC
** terminal specifics
*** xclip
    If xclip is installed we can connect the emacs kill-ring to X11
    #+BEGIN_SRC emacs-lisp
      (if (and (executable-find "xclip") (not window-system))
          (use-package xclip
            :ensure t
            :init
            (xclip-mode 1)))
    #+END_SRC
** flyspell
   #+BEGIN_SRC emacs-lisp
     (setq ispell-dictionary "en")
     (add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))
     (add-hook 'org-mode-hook (lambda () (flyspell-mode)))
   #+END_SRC
** shell
   Setup and bind ansi-term
   #+BEGIN_SRC emacs-lisp
     (defvar my-shell "/bin/bash")
     (defadvice ansi-term (before force-bash)
       (interactive (list my-shell)))
     (ad-activate 'ansi-term)
     (global-set-key (kbd "s-t") 'ansi-term)
   #+END_SRC
** config file bindings
   #+BEGIN_SRC emacs-lisp
     (defun open-config ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))

     (defun reload-config ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

     (global-set-key (kbd "<f6>") 'open-config)
     (global-set-key (kbd "<f7>") 'reload-config)
   #+END_SRC
** default key bindings
*** scroll-preserve-screen-position
    Scroll but keep cursor at the same relative offset in the buffer.
    #+BEGIN_SRC emacs-lisp
      (setq scroll-preserve-screen-position 1)
      (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
      (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
    #+END_SRC
*** buffer switching
    Setup ido-switch buffer and ibuffer to be used instead of the
    default buffer menu which sucks.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
*** uncomment-region
    Comment region is bound per default to C-c C-c. uncomment-region is
    not bound to any key per default.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (local-set-key (kbd "C-c C-v") 'uncomment-region)))
#+END_SRC
*** backward delete 
     These binds are used to save my pinky during long programming
     sessions
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-h") 'backward-delete-char)
      (global-set-key (kbd "M-h") 'backward-kill-word)
    #+END_SRC
*** misc
     #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-g") 'goto-line) 
     (global-set-key (kbd "<f9>") 'linum-mode) ;; show line number
     (global-set-key (kbd "<f1>") 'help-command) ;; I needed this key for delete
     #+END_SRC
* Visual
** rainbow-delimiters 
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'c-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'c++-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC
** centered-window
#+BEGIN_SRC emacs-lisp
  (use-package centered-window
    :ensure t
    :init
    (setq cwm-centered-window-width 100)
    (centered-window-mode t)
    )
#+END_SRC
** Smooth Scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :init
    (smooth-scrolling-mode 1)
    )
#+END_SRC
* Navigation
** ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t
    :bind ([f5] . sr-speedbar-toggle)
    )
#+END_SRC
** avy 
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . 'avy-goto-char))
#+END_SRC
* Editing
** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
  (global-set-key (kbd "C-c e") 'eval-and-replace)
#+END_SRC
** ws-butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :defer
    :init
      (add-hook 'prog-mode-hook #'ws-butler-mode))
#+END_SRC
* Version control
** magit
   #+BEGIN_SRC emacs-lisp
     ;; KTH has a way to old emacs version
     (when (>= emacs-major-version 25)
         (use-package magit
           :ensure t
           ))
   #+END_SRC
* Programming
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t) 
#+END_SRC
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init
       (setq yas-snippet-dirs (append yas-snippet-dirs '("~/.emacs.d/snippets")))
       (yas-global-mode 1)
       )
   #+END_SRC
** irony
#+BEGIN_SRC emacs-lisp
  (defun my-irony-mode-hook ()
    (when (or (eq major-mode 'c++-mode) (eq major-mode 'c-mode))
        (setq irony-additional-clang-options '("-std=c++17"))
        (irony-mode 1)))
  (when has-clang
    (use-package irony
      :ensure t
      :init
      (add-hook 'c++-mode-hook 'my-irony-mode-hook)
      (add-hook 'c-mode-hook 'my-irony-mode-hook)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
      (add-hook 'irony-mode-hook #'irony-eldoc)
      )
    (use-package irony-eldoc
      :ensure t)
    (use-package company-irony
      :ensure t)
    (use-package flycheck-irony
      :ensure t))
#+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
     (use-package company-c-headers
       :ensure t)
     (use-package company-glsl
       :ensure t)
     (use-package company-jedi
       :ensure t)

     (defun my-company-visible-and-explicit-action-p ()
         (and (company-tooltip-visible-p)
              (company-explicit-action-p)))
     (defun my-company-mode-hook ()
       "Setting up company-mode."
       (setq company-require-match 'never)
       (setq company-auto-complete
            #'my-company-visible-and-explicit-action-p)
       (setq company-frontends
            '(company-pseudo-tooltip-unless-just-one-frontend
              company-preview-frontend
              company-echo-metadata-frontend))
       (setq company-idle-delay 0)
       (setq company-async-timeout 5)
       (setq company-minimum-prefix-length 2)
       (local-key-binding (kbd "<tab>") 'company-indent-or-complete-common)
       (local-key-binding (kbd "TAB") 'company-indent-or-complete-common))


     (defun my-company-c-mode-hook ()
       "Setup company-backends list for c and c++.
     Emacs cant use company-irony if clang is not installed."
           (if (not has-clang)
               (set (make-local-variable 'company-backends) '(company-c-headers
                                                              company-files))
             (set (make-local-variable 'company-backends) '(company-irony))))

     (defun my-company-glsl-mode-hook ()
       "Setup company-backends list for glsl."
       (set (make-local-variable 'company-backends) '(company-glsl)))

     (defun my-company-python-mode-hook ()
       "Setup company-backends list for python."
       (set (make-local-variable 'company-backends) '(company-jedi
                                                     company-files)))

     (use-package company
       :ensure t
       :init
       (add-hook 'prog-mode-hook 'company-mode)
       (add-hook 'prog-mode-hook 'my-company-mode-hook)
       (add-hook 'c++-mode-hook 'my-company-c-mode-hook)
       (add-hook 'c-mode-hook 'my-company-c-mode-hook)
       (add-hook 'glsl-mode-hook 'my-company-glsl-mode-hook)
       (add-hook 'python-mode-hook 'my-company-python-mode-hook))
   #+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (add-hook 'after-init-hook #'global-flycheck-mode)
       (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++17")))
       (add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++17")))
       (when has-clang (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package flycheck-color-mode-line
  :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (when has-clang
    (use-package flycheck-clang-analyzer
      :after (flycheck)
      :ensure t
      :init
      (flycheck-clang-analyzer-setup)
      ))
#+END_SRC
** modes
*** glsl-mode
#+BEGIN_SRC emacs-lisp
  (use-package glsl-mode
    :ensure t
    )
#+END_SRC
*** cake-mode 
    #+BEGIN_SRC emacs-lisp
      (use-package cmake-mode
        :ensure t
        )
    #+END_SRC
*** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t)
#+END_SRC
*** c++-mode
    #+BEGIN_SRC emacs-lisp
      (defconst my-c++-style
        '((c-basic-offset   . 4)
          (c-offsets-alist  . ((inline-open         . 0)
                               (brace-list-open     . 0)
                               (inextern-lang       . 0)
                               (innamespace         . 0)
                               (inlambda            . 0)
                               (statement-case-open . +))))
        (c-echo-syntactic-information-p . t))

      (c-add-style "my-c++-style" my-c++-style)
      (defun my-c++-style-hook ()
        (c-set-style "my-c++-style"))
      (add-hook 'c++-mode-hook 'my-c++-style-hook)
    #+END_SRC

* Org-mode
Changes the default dots to unicode characters
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
Emacs latex setup
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode %f \
           biber %b" "pdflatex -interaction nonstopmode %f \
           pdflatex -interaction nonstopmode --synctex=-1 %f"))
#+END_SRC
