* Initial Setup
** package
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                            ("melpa" . "https://melpa.org/packages/")
                            ("org" . "http://orgmode.org/elpa/")))
   (package-initialize)
   (add-to-list 'load-path "~/.emacs.d/elpa/")

   (setq-default indent-tabs-mode nil)
   #+END_SRC
   
** use-package
  The configuration relies heavily on use-package to ensure packages
  are installed automatically. The following code ensures that
  use-package is installed automatically aswell.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (progn (message "installing use-package")
           (package-refresh-contents)
           (package-install 'use-package)))
  (require 'use-package)
#+END_SRC
** auto-compile
#+BEGIN_SRC emacs-lisp
    (setq load-prefer-newer t)
    (use-package auto-compile
      :ensure t
      :config (auto-compile-on-load-mode))
#+END_SRC
** defaults
*** backup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+END_SRC
** email
   #+BEGIN_SRC emacs-lisp
     (setq send-mail-function 'smtpmail-send-it
           smtpmail-smtp-server "smtp.kth.se"
           smtpmail-stream-type 'starttls
           smtpmail-smtp-service 587)
     (setq user-full-name "Gustav Nelson Schneider")
     (setq user-mail-address "gussch@kth.se")
   #+END_SRC
** terminal specifics
*** xclip
    If xclip is installed we can connect the emacs kill-ring to X11
    #+BEGIN_SRC emacs-lisp
      (if (and (executable-find "xclip") (not window-system))
          (use-package xclip
            :ensure t
            :config
            (xclip-mode 1)))
    #+END_SRC
** flyspell
   #+BEGIN_SRC emacs-lisp
     (setq ispell-dictionary "en")
     (add-hook 'prog-mode-hook (lambda () (flyspell-prog-mode)))
     (add-hook 'org-mode-hook (lambda () (flyspell-mode)))
   #+END_SRC
** shell
   Setup and bind ansi-term
   #+BEGIN_SRC emacs-lisp
     (defvar my-shell "/bin/bash")
     (defadvice ansi-term (before force-bash)
       (interactive (list my-shell)))
     (ad-activate 'ansi-term)
     (global-set-key (kbd "s-t") 'ansi-term)

   #+END_SRC
** config file key bindings
   #+BEGIN_SRC emacs-lisp
     (defun open-config ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))

     (defun reload-config ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

     (global-set-key (kbd "<f6>") 'open-config)
     (global-set-key (kbd "<f7>") 'reload-config)
   #+END_SRC
* key bindings
** scroll-preserve-screen-position
    Scroll but keep cursor at the same relative offset in the buffer.
    #+BEGIN_SRC emacs-lisp
      (setq scroll-preserve-screen-position 1)
      (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
      (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
    #+END_SRC
** buffer switching
    Setup ido-switch buffer and ibuffer to be used instead of the
    default buffer menu which sucks.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
** uncomment-region
    Comment region is bound per default to C-c C-c. uncomment-region is
    not bound to any key per default.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (local-set-key (kbd "C-c C-c") 'comment-region)))
  (add-hook 'prog-mode-hook (lambda () (local-set-key (kbd "C-c C-v") 'uncomment-region)))
#+END_SRC
** backward delete 
     These binds are used to save my pinky during long programming
     sessions
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-h") 'backward-delete-char)
      (global-set-key (kbd "M-h") 'backward-kill-word)
    #+END_SRC
** misc
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "M-g") 'goto-line) 
       (global-set-key (kbd "<f9>") 'linum-mode) ;; show line number
       (global-set-key (kbd "C-<tab>") 'bury-buffer)

       (setq visible-bell 1)
     #+END_SRC
* Visual
** style
*** misc
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1) ;; no menu bar
  (tool-bar-mode -1) ;; no tool bar
  (scroll-bar-mode -1) ;; no scrollbar
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-dark t))

  (use-package all-the-icons :ensure t)
  (use-package all-the-icons-dired :ensure t)

  (use-package doom-modeline
    :ensure t
    :custom
    (doom-modeline-height 15)
    ;;(doom-modeline-minor-modes t)
    ;;(doom-modeline-indent-info t)
    ;;(doom-modeline-enable-word-count t)
    (doom-modeline-buffer-encoding nil)
    :hook
    (after-init . doom-modeline-mode))

  (use-package fancy-battery
    :ensure t
    :defer t
    :hook (after-init . fancy-battery-mode))
#+END_SRC
** rainbow-delimiters 
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'c-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'c++-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC
** centered-window
#+BEGIN_SRC emacs-lisp
  ;; (use-package centered-window
  ;;   :ensure t
  ;;   :defer t
  ;;   :init
  ;;   (setq cwm-centered-window-width 100)
  ;;   (centered-window-mode t)
  ;;   )
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (use-package gh-md
    :ensure t
    :defer t)
#+END_SRC
* Navigation
** ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t
    :defer t
    :bind ([f5] . sr-speedbar-toggle)
    )
#+END_SRC
** avy 
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . 'avy-goto-char))
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :custom
    (aw-dispatch-always t)
    :bind
    ("M-o" . 'ace-window))
#+END_SRC
* Editing
** key-chord
#+BEGIN_SRC emacs-lisp
    (use-package key-chord
      :ensure t
      :config
      (progn
       ;;(setq 'key-chord-one-key-delay 0.16)
	(key-chord-mode 1)
	(key-chord-define-global "uu" 'undo)))
#+END_SRC
** Hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra     
       :ensure t
       :defer t
       :after key-chord
       :config
       (defhydra hydra-zoom ()
	 "zoom"
	 ("g" text-scale-increase "in")
	 ("l" text-scale-decrease "out"))
       (defhydra hydra-help ()
	 "help"
	 ("b" describe-bindings "bindings")
	 ("c" describe-key-briefly "key-briefly")
	 ("k" describe-key "key")
	 ("f" describe-function "function")
	 ("m" describe-mode "mode")
	 ("n" view-emacs-news "news")
	 ("o" descibe-symbol "symbol")
	 ("P" describe-package "package")
	 ("w" where-is "command")
	 ("t" help-with-tutorial "tutorial")
	 ("q" nil "quit"))  
       :bind
       ("<f1>" . hydra-help/body)
       ("<f2>" . hydra-zoom/body))
   #+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :defer t
    :after hydra
    :config
    (defhydra hydra-multiple-cursors (:color pink)	
      "multiple cursrors"
      ("n" mc/mark-next-like-this "next")
      ("p" mc/mark-previous-like-this "prev")
      ("a" mc/mark-all-like-this "all")
      ("q" mc/sort-regions "sort")
      ("r" mc/reverse-regions "reverse")
      ("s" mc/skip-to-next-like-this "skip")
      ("d" mc/edit-lines "edit-lines")
      ("q" nil "quit"))
      ;;(key-chord-define-global "hh" 'hydra-multiple-cursors/body)
    :bind
    ("C-c n" . hydra-multiple-cursors/body))
#+END_SRC
** eval-and-replace
#+BEGIN_SRC emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
  (global-set-key (kbd "C-c e") 'eval-and-replace)
#+END_SRC
** ws-butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :defer t
    :config
      (add-hook 'prog-mode-hook #'ws-butler-mode))
#+END_SRC
* Version control
** Magit
   #+BEGIN_SRC emacs-lisp
     ;; KTH has a way to old emacs version
     (when (>= emacs-major-version 25)
	 (use-package magit
	   :ensure t
	   :after hydra
	   :defer t
	   :config
	   (defhydra hydra-magit (:color pink
					 :exit t)
	     "magit"
	     ("s" magit-status "status")
	     ("c" magit-checkout "checkout")
	     ("d" magit-diff "diff")
	     ("b" magit-branch "branch")
	     ("m" magit-merge "merge")
	     ("r" magit-rebase "rebase")
	     ("1" magit-pull "pull")
	     ("2" magit-push "push")
	     ("l" magit-log "log")
	     ("t" magit-tag "tag")
	     ("p" magit-patch "patch")
	     ("f" magit-fetch "fetch")
	     ("r" magit-remote "remote")
	     ("z" magit-stash "stash")
	     ("x" magit-reset-quickly "reset")
	     ("v" magit-revert "revert")
	     ("a" magit-cherry-pick "cherry-pick"))
	   :bind
	   ("C-c m" . hydra-magit/body)))
   #+END_SRC
* Auto completion
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :config
    (yas-global-mode 1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :defer t
    :after yasnippet
    :config
    (setq yas-snippet-dirs (append yas-snippet-dirs '("~/.emacs.d/snippets")))) 
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :ensure t
    :after company)
  (use-package company-glsl
    :ensure t
    :after company)
  (use-package company-jedi
    :ensure t
    :after company)

  ;; (defun my-company-visible-and-explicit-action-p ()
  ;;   (and (company-tooltip-visible-p)
  ;;        (company-explicit-action-p)))
  ;; (defun my-company-mode-hook ()
  ;;   "Setting up company-mode."
  ;;   (setq company-require-match 'never)
  ;;   (setq company-auto-complete
  ;; 	#'my-company-visible-and-explicit-action-p)
  ;;   (setq company-frontends
  ;; 	'(company-pseudo-tooltip-unless-just-one-frontend
  ;; 	  company-preview-frontend
  ;; 	  company-echo-metadata-frontend))
  ;;   (setq company-idle-delay 0)
  ;;   (setq company-async-timeout 5)
  ;;   (setq company-minimum-prefix-length 2)
  ;;   (local-key-binding (kbd "<tab>") 'company-indent-or-complete-common)
  ;;   (local-key-binding (kbd "TAB") 'company-indent-or-complete-common))

  ;; (defun my-company-c-mode-hook ()
  ;;   "Setup company-backends list for c and c++.
  ;; Emacs cant use company-irony if clang is not installed."
  ;;   (if (not has-clang)
  ;;       (set (make-local-variable 'company-backends) '(company-c-headers
  ;; 						     company-files))
  ;;     (set (make-local-variable 'company-backends) '(company-irony))))

  ;; (defun my-company-glsl-mode-hook ()
  ;;   "Setup company-backends list for glsl."
  ;;   (set (make-local-variable 'company-backends) '(company-glsl)))

  ;; (defun my-company-python-mode-hook ()
  ;;   "Setup company-backends list for python."
  ;;   (set (make-local-variable 'company-backends) '(company-jedi
  ;; 						 company-files)))

  ;; (use-package company-emacs-eclim
  ;;   :ensure t
  ;;   :after company
  ;;   :init (company-emacs-eclim-setup))
  (use-package company
    :ensure t
    :defer t
    :init
    ;; (add-hook 'prog-mode-hook 'company-mode)
    ;; (add-hook 'prog-mode-hook 'my-company-mode-hook)
    ;; (add-hook 'c++-mode-hook 'my-company-c-mode-hook)
    ;; (add-hook 'c-mode-hook 'my-company-c-mode-hook)
    ;; (add-hook 'glsl-mode-hook 'my-company-glsl-mode-hook)
    ;; (add-hook 'python-mode-hook 'my-company-python-mode-hook)
    ;; :bind
    ;; (:map company-active-map
    ;;       ("C-n" . company-select-next)
    ;;       ("C-p" . company-select-previous))
    ;; (:map company-search-map
    ;;       ("C-n" . company-select-next)
    ;;       ("C-p" . company-select-previous)
    ;;       ("C-t" . company-search-toggle-filtering))
    )
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode)
    ;;(add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++17")))
    ;;(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++17")))
    ;;(when has-clang (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-color-mode-line
    :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :after flycheck
    :ensure t
    :defer t
    :config
    (flycheck-clang-analyzer-setup)
    )
#+END_SRC

** LSP Mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    ((c++-mode . lsp)
     (c++-ts-mode . lsp)
     (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui :ensure t :commands lsp-ui-mode)
  (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)
  (use-package dap-mode :ensure t)

#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+END_SRC

** clang-format

#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :ensure t)
#+END_SRC

* Programming
** glsl-mode
#+BEGIN_SRC emacs-lisp
  (use-package glsl-mode
    :ensure t
    :defer t)
#+END_SRC
** cake-mode 
    #+BEGIN_SRC emacs-lisp
      (use-package cmake-mode
	:ensure t
	:defer t)
    #+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :defer t)
#+END_SRC
** c++-mode
    #+BEGIN_SRC emacs-lisp
      (defconst my-c++-style
        '((c-basic-offset   . 4)
          (c-offsets-alist  . ((inline-open         . 0)
                               (brace-list-open     . 0)
                               (inextern-lang       . 0)
                               (innamespace         . 0)
                               (inlambda            . 0)
                               (statement-case-open . +))))
        (c-echo-syntactic-information-p . t))

      (c-add-style "my-c++-style" my-c++-style)
      (defun my-c++-style-hook ()
        (c-set-style "my-c++-style"))
      (add-hook 'c++-mode-hook 'my-c++-style-hook)
      (add-hook 'cuda-mode-hook 'my-c++-style-hook)
    #+END_SRC

** Eclim
#+BEGIN_SRC emacs-lisp
  (use-package eclim
    :ensure t
    :custom 
    (eclim-eclipse-dirs '("~/eclipse/jee-2019-06/eclipse"))
    (eclim-executable "~/.p2/pool/plugins/org.eclim_2.8.0/bin/eclim")
    (eclimd-autostart nil)
    :hook (java-mode . eclim-mode))
#+END_SRC
* Misc Modes
** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :defer t)
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :defer t)
#+END_SRC
** TODO Latex
#+BEGIN_SRC emacs-lisp
  (use-package bibtex
    :ensure t
    :defer t)  
#+END_SRC

* Org-mode
Changes the default dots to unicode characters
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :defer t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (add-hook 'org-mode-hook (lambda () (org-special-blocks 1)))
)    
#+END_SRC
Emacs latex setup
#+BEGIN_SRC emacs-lisp
    ;; (setq org-latex-pdf-process
    ;;       '("pdflatex -interaction nonstopmode %f \
    ;;          biber %b" "pdflatex -interaction nonstopmode %f \
    ;;          pdflatex -interaction nonstopmode --synctex=-1 %f"))
  (setq org-latex-pdf-process (list
     "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
#+END_SRC
Larger latex fragments
#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** org-babel language setup
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (python . t)))
#+END_SRC
